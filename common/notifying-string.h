/* Generated by GOB (v2.0.17)   (do not edit directly) */

#include <glib.h>
#include <glib-object.h>
#ifndef __NOTIFYING_STRING_H__
#define __NOTIFYING_STRING_H__

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


/*
 * Type checking and casting macros
 */
#define NOTIFYING_TYPE_STRING	(notifying_string_get_type())
#define NOTIFYING_STRING(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), notifying_string_get_type(), NotifyingString)
#define NOTIFYING_STRING_CONST(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), notifying_string_get_type(), NotifyingString const)
#define NOTIFYING_STRING_CLASS(klass)	G_TYPE_CHECK_CLASS_CAST((klass), notifying_string_get_type(), NotifyingStringClass)
#define NOTIFYING_IS_STRING(obj)	G_TYPE_CHECK_INSTANCE_TYPE((obj), notifying_string_get_type ())

#define NOTIFYING_STRING_GET_CLASS(obj)	G_TYPE_INSTANCE_GET_CLASS((obj), notifying_string_get_type(), NotifyingStringClass)

/* Private structure type */
typedef struct _NotifyingStringPrivate NotifyingStringPrivate;

/*
 * Main object structure
 */
#ifndef __TYPEDEF_NOTIFYING_STRING__
#define __TYPEDEF_NOTIFYING_STRING__
typedef struct _NotifyingString NotifyingString;
#endif
struct _NotifyingString {
	GObject __parent__;
	/*< private >*/
	NotifyingStringPrivate *_priv;
};

/*
 * Class definition
 */
typedef struct _NotifyingStringClass NotifyingStringClass;
struct _NotifyingStringClass {
	GObjectClass __parent__;
	/*signal*/void (* changed) (NotifyingString * self);
};


/*
 * Public methods
 */
GType	notifying_string_get_type	(void) G_GNUC_CONST;
#line 7 "common/notifying-string.gob"
void 	notifying_string_changed	(NotifyingString * self);
#line 57 "notifying-string.h"
#line 13 "common/notifying-string.gob"
GObject * 	notifying_string_new	(void);
#line 60 "notifying-string.h"
#line 19 "common/notifying-string.gob"
void 	notifying_string_set	(NotifyingString * self,
					const gchar * value);
#line 64 "notifying-string.h"
#line 25 "common/notifying-string.gob"
gchar * 	notifying_string_get	(NotifyingString * self);
#line 67 "notifying-string.h"

/*
 * Signal connection wrapper macros
 */
#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
#define notifying_string_connect__changed(object,func,data)	g_signal_connect(NOTIFYING_STRING(__extension__ ({NotifyingString *___object = (object); ___object; })),"changed",(GCallback) __extension__ ({void (* ___changed) (NotifyingString * ___fake___self, gpointer ___data ) = (func); ___changed; }), (data))
#define notifying_string_connect_after__changed(object,func,data)	g_signal_connect_after(NOTIFYING_STRING(__extension__ ({NotifyingString *___object = (object); ___object; })),"changed",(GCallback) __extension__ ({void (* ___changed) (NotifyingString * ___fake___self, gpointer ___data ) = (func); ___changed; }), (data))
#define notifying_string_connect_data__changed(object,func,data,destroy_data,flags)	g_signal_connect_data(NOTIFYING_STRING(__extension__ ({NotifyingString *___object = (object); ___object; })),"changed",(GCallback) __extension__ ({void (* ___changed) (NotifyingString * ___fake___self, gpointer ___data ) = (func); ___changed; }), (data), (destroy_data), (GConnectFlags)(flags))
#else /* __GNUC__ && !__STRICT_ANSI__ */
#define notifying_string_connect__changed(object,func,data)	g_signal_connect(NOTIFYING_STRING(object),"changed",(GCallback)(func),(data))
#define notifying_string_connect_after__changed(object,func,data)	g_signal_connect_after(NOTIFYING_STRING(object),"changed",(GCallback)(func),(data))
#define notifying_string_connect_data__changed(object,func,data,destroy_data,flags)	g_signal_connect_data(NOTIFYING_STRING(object),"changed",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#endif /* __GNUC__ && !__STRICT_ANSI__ */


#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif
