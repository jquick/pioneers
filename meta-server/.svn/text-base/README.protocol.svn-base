
Here I try to describe the details of Pioneers' meta server protocol.
This is the protocol the meta server speaks, the remote instances are
either Pioneers clients or Pioneers servers.

For each instance speaking the protocol (meta server, server, and
client) I list accepted messages, sent replies and actions taken. I
hope that's understandable, but with more than two instances the usual
request-reply paradigm for protocols doesn't match so well :)

Currently, there exist two version of the MS protocol: 0.0 and 1.0.
The format was used by meta servers in program versions before 0.7,
after that 1.0 is current.

Some questionable points in MS proto 1.0 are marked with "XXX" below.

I also propose a new proto version 1.1 (will be marked with "NEW")
that is backward-compatible with 1.0 (i.e., existing 1.0 instances
won't run into errors). The extensions if 1.1 should be:

 - meta servers can talk to each other for game list merging, load
   balancing etc.

   this doesn't affect servers and clients at all

 - meta servers report ability to start local servers
   (so that the "start server" button in the client can be disabled)

   this info will be in the welcome line this is parsed partially
   anyways

 - in the game type list, don't send only game names, but also some
   associated default values (terrain type, #players, victory points)
   so that the "create server" dialog in the client works more like
   the one in the GTK server (changes those params when another game
   is selected)

   this can be easily done by messages other than "type=", because
   older clients ignore such lines

Roman



META-SERVER
-----------
listens on port 5557
accepts conns from clients (searches) and from servers (registrations)
has a list of locally installed games

MS on accept prints "welcome to the pioneers-meta-server version FOO"
and sets peer state to UNKNOWN

Exception: If MS started with -r (redirect) option, it just sends
"goto OTHERSERVER" and closes the connection.

accepted messages in state UNKNOWN and CLIENT:
 - "version FOO"
   MS remembers client version of MS proto
 - "listservers"
   set state to CLIENT
   send list of known servers
   the format is a block of the following form for each known server:
     "server"
     "host=FOO"
     "port=FOO"
     "version=FOO"
     "max=FOO"
     "curr=FOO"
     "vpoints=FOO" if client MS proto version >= 1.0
     "sevenrule=FOO" if client MS proto version >= 1.0
     "terrain=FOO" if client MS proto version >= 1.0
     "title=FOO" if client MS proto version >= 1.0
     "map=FOO" if client MS proto version < 1.0
     "comment=FOO" if client MS proto version < 1.0
     "end"
 - "listtypes"
   set state to CLIENT
   send list of known games types
   the format is a block of the following form for each known game:
     "type=FOO"
 - "create TERRAIN MAXPLAYERS VPOINTS SEVENSRULE AIPLAYERS GAMENAME"
   set state to CLIENT
   tries to start new server with received parameters
     (the new server is ordered to register at _this_ meta server)
   if successful, send
     "host=FOO"
     "port=FOO"
     "started"
   else print an error message, e.g.:
     "fork failed"
     "cannot exec"
     "badly formatted request"
 - "server"
   set state to SERVER_ALMOST

XXX: "server" shouldn't be accepted in CLIENT state, only in UNKNOWN.
Currently, both are in the same switch case, could be implemented with
a fall-through.

accepted messages in state SERVER_ALMOST and SERVER:
 - "host=FOO"
 - "port=FOO"
 - "version=FOO"
 - "max=FOO"
 - "curr=FOO"
 - "terrain=FOO"
 - "title=FOO"
 - "vpoints=FOO"
 - "sevenrule=FOO"
 - "map=FOO"
   meta proto 0.0 compat: mapped to terrain=
 - "comment=FOO"
   meta proto 0.0 compat: mapped to title=
For all the above, the MS stores the info
If all the following conditions are met, the state is set to SERVER:
 - host non-empty
 - port > 0
 - version non-empty
 - max >= 0
 - curr >= 0
 - terrain non-empty
 - title non-empty
 - vpoints non-empty
 - sevenrule non-empty
As an exception, for MS proto < 1.0, vpoints and sevenrule aren't
needed and are assigned as '?' if not set
Additionally, the 'host' and 'port' fields are pre-set at accept time
with the values of getpeername() (IP is reverse-looked up), so the
server isn't required to send them.

accepted messages in state SERVER:
 - "begin"
   close connection
   seems to be obsolete, server can close connection with this?!?   

For connections in state SERVER, the MS sends "hello" every 8 minutes
and expects "yes" as reply (keep-alive ping)


SERVER
------
when started and directed to register at a MS, it connects to MS and
sets state to SIGNON

accepted messages in states SIGNON and REDIRECT:
 - "goto SERVER [PORT]"
   set state to REDIRECT
   try another connection to SERVER/PORT (default port if no PORT sent;
   max. 10 goto msgs are accepted)
 - "welcome.*version FOO"
   remembers MS proto version
   set state to SERVER_LIST
   send "version FOO", where FOO is own MS proto version
   send "server"
   send game parameters:
     "port=FOO"
     "version=FOO" (client-server proto version)
     "max=FOO"
     "curr=FOO"
     "host=FOO" if hostname defined
     "vpoints=FOO" if MS proto >= 1.0
     "sevenrule=FOO" if MS proto >= 1.0
     "terrain=FOO" if MS proto >= 1.0
     "title=FOO" if MS proto >= 1.0
     "map=FOO" if MS proto < 1.0
     "comment=FOO" if MS proto < 1.0

accepted messages in state SERVER_LIST:
 - "hello"
   send "yes"
   (ping reply)

whenever #player changes, sends "curr=FOO"


CLIENT
------
When requested by the user by button, client connects to MS and sets
state to SIGNON

accepted messages in states SIGNON and REDIRECT:
 - "goto SERVER [PORT]"
   set state to REDIRECT
   try another connection to SERVER/PORT (default port if no PORT sent;
   max. 10 goto msgs are accepted)
 - "welcome.*version FOO"
   remembers MS proto version
   if MS proto < 1.0, prints warning that MS cannot start servers
   if MS proto >= 1.0, sends "version FOO", where FOO is own MS proto version
   sends "listservers" or "client" for MS proto >= 1.0 or < 1.0, resp.
   set state to LIST

accepted messages in state LIST:
 - "server"
   starts a new row in the dialog internally
 - "end"
   shows new row in dialog internally
 - "host=FOO"
 - "port=FOO"
 - "version=FOO" (client-server proto version)
 - "max=FOO"
 - "curr=FOO"
 - "vpoints=FOO"
 - "sevenrule=FOO"
 - "terrain=FOO"
 - "title=FOO"
 - "map=FOO"
   meta proto 0.0 compat: mapped to terrain=
 - "comment=FOO"
   meta proto 0.0 compat: mapped to title=

When requested by the user to create a new server via meta server,
client connects to MS and sets state to SIGNON.
XXX: it doesn't read the welcome line??
Then it sends "listtypes", and sets state to LIST

accepted messages in state LIST:
 - "type=FOO" (FOO: game name)
   add name to combo box
 - other messages are ignored

Connection is closed by MS after list is finished.

When requested by the user to create a new server via meta server,
client connects to MS and sets state to SIGNON.
XXX: it doesn't read the welcome line??
Then it sends
  "create TERRAIN MAXPLAYERS VPOINTS SEVENSRULE AIPLAYERS GAMENAME"
and sets state to LIST

accepted messages in state LIST:
 - "host=FOO"
   info is stored in connect dialog entry
 - "port=FOO"
   info is stored in connect dialog entry
 - "started"
   create dialog is destroyed
 - anything else:
   reported as error message to user

-----
Change of protocol 1.2 -> 1.3
-----
When the meta server is not capable of creating new games, the 'create' command
is disabled. A 'bad command' will be sent.
