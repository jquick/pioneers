diff -urN old_pioneers//client/common/callback.c pioneers-0.12.4//client/common/callback.c
--- old_pioneers//client/common/callback.c	2011-07-06 11:17:46.364275002 -0400
+++ pioneers-0.12.4//client/common/callback.c	2011-07-06 10:46:53.404275004 -0400
@@ -217,6 +217,7 @@
 		 || callback_mode == MODE_ROAD_BUILD
 		 || callback_mode == MODE_SETUP
 		 || callback_mode == MODE_SPECIAL_BUILDING_PHASE);
+
 	sm_send(SM(), "done\n");
 	sm_push(SM(), mode_done_response);
 }
diff -urN old_pioneers//client/common/client.c pioneers-0.12.4//client/common/client.c
--- old_pioneers//client/common/client.c	2011-07-06 11:17:46.364275002 -0400
+++ pioneers-0.12.4//client/common/client.c	2011-07-06 11:05:21.274275000 -0400
@@ -36,6 +36,7 @@
 
 int TURN_LENGTH_SECONDS = 0;
 int SBP_LENGTH_SECONDS = 0;
+int seconds_remaining;
 
 static enum callback_mode previous_mode;
 GameParams *game_params;
@@ -1535,10 +1536,18 @@
 			return TRUE;
 		}
 		if (sm_recv(sm, "special building phase")) {
+			seconds_remaining = SBP_LENGTH_SECONDS;
 			callbacks.special_building_phase();
 			sm_push(sm, mode_special_building_phase);
 			return TRUE;
 		}
+		if (sm_recv(sm, "OK")) {
+			// HACK: ignore an unexpected "OK" here; if we disconnect and rejoin
+			// during SBP, we get put in idle state instead of SBP state.  this is
+			// fine; we simply forfeit the rest of this SBP; however, when SBP ends
+			// and the server sends an OK, we get confused.  so ignore that.
+			return TRUE;
+		}
 		if (sm_recv
 		    (sm,
 		     "player %d domestic-trade call supply %R receive %R",
diff -urN old_pioneers//client/gtk/gui.c pioneers-0.12.4//client/gtk/gui.c
--- old_pioneers//client/gtk/gui.c	2011-07-06 11:17:46.364275002 -0400
+++ pioneers-0.12.4//client/gtk/gui.c	2011-07-06 11:21:28.314275003 -0400
@@ -835,22 +835,37 @@
 
 void update_turn_timer(void)
 {
-	static char time_remaining_string[15];
+	static char time_remaining_string[25];
 	void frontend_state_idle(G_GNUC_UNUSED GuiEvent event); // prototype from interface.c
 
+	/* DEBUG
+	static char modemode[30];
+	if(callback_mode == MODE_WAIT_TURN) strcpy(modemode, "MODE_WAIT_TURN");
+	else if(callback_mode == MODE_TURN) strcpy(modemode, "MODE_TURN");
+	else if(callback_mode == MODE_SPECIAL_BUILDING_PHASE) strcpy(modemode, "MODE_SPECIAL_BUILDING_PHASE");
+	else if(callback_mode == MODE_DISCARD) strcpy(modemode, "MODE_DISCARD");
+	else if(callback_mode == MODE_DISCARD_WAIT) strcpy(modemode, "MODE_DISCARD_WAIT");
+	else if(callback_mode == MODE_ROB) strcpy(modemode, "MODE_ROB");
+	else if(callback_mode == MODE_ROBBER) strcpy(modemode, "MODE_ROBBER");
+	else if(callback_mode == MODE_DOMESTIC) strcpy(modemode, "MODE_DOMESTIC");
+	else if(callback_mode == MODE_QUOTE) strcpy(modemode, "MODE_QUOTE");
+	else strcpy(modemode, "OTHER");
+	log_message(MSG_INFO, "Mode = %s\n", modemode);
+	END DEBUG */
+
 	if(seconds_remaining == 1) {
 		// time's up noob!
 		seconds_remaining = 0;
 
 		if(callback_mode == MODE_TURN) {
 			gui_set_instructions("Time's up, your turn is now over.");
-			log_message(MSG_INFO, "%s's time has run out; their turn is now over.\n", player_name(current_player(), TRUE));
 			trade_finish();
 			quote_finish();
 			if(!have_rolled_dice()) {
 				cb_roll();
 				seconds_remaining = 1; // FIXME hack; wait for the roll event to resolve first
 			} else {
+				log_message(MSG_INFO, "%s's time has run out; their turn is now over.\n", player_name(current_player(), TRUE));
 				cb_end_turn();
 				set_gui_state(frontend_state_idle);
 			}
@@ -907,7 +922,7 @@
 
 	// render timer
 	if(seconds_remaining > 0) {
-		snprintf(time_remaining_string, 15, "<b>%02d:%02d</b>", seconds_remaining / 60, seconds_remaining % 60);
+		snprintf(time_remaining_string, 25, "<b>%02d:%02d</b>%s", seconds_remaining / 60, seconds_remaining % 60, (callback_mode == MODE_SPECIAL_BUILDING_PHASE ? "  [SBP]" : ""));
 		gtk_label_set_markup(GTK_LABEL(turn_timer_widget), time_remaining_string);
 		gtk_widget_queue_draw(turn_timer_widget);
 	} else {
diff -urN old_pioneers//client/gtk/interface.c pioneers-0.12.4//client/gtk/interface.c
--- old_pioneers//client/gtk/interface.c	2011-07-06 11:17:46.364275002 -0400
+++ pioneers-0.12.4//client/gtk/interface.c	2011-07-06 11:07:06.314275004 -0400
@@ -425,7 +425,7 @@
 	switch (event) {
 	case GUI_UPDATE:
 		frontend_gui_check(GUI_ROLL, FALSE);
-		frontend_gui_check(GUI_UNDO, can_undo());
+		frontend_gui_check(GUI_UNDO, FALSE);
 		frontend_gui_check(GUI_ROAD, turn_can_build_road());
 		frontend_gui_check(GUI_SHIP, turn_can_build_ship());
 		frontend_gui_check(GUI_MOVE_SHIP, FALSE);
@@ -438,7 +438,7 @@
 		frontend_gui_check(GUI_TRADE, FALSE);
 		frontend_gui_check(GUI_PLAY_DEVELOP, FALSE);
 		frontend_gui_check(GUI_BUY_DEVELOP, FALSE);
-		frontend_gui_check(GUI_FINISH, TRUE);
+		frontend_gui_check(GUI_FINISH, FALSE); // don't allow clicking finish during SBP
 
 		guimap_single_click_set_functions(check_road,
 						  build_road_cb,
@@ -511,8 +511,6 @@
 
 void frontend_special_building_phase(void)
 {
-	seconds_remaining = SBP_LENGTH_SECONDS;
-
 	set_gui_state(frontend_state_special_building_phase);
 }
 
diff -urN old_pioneers//client/gtk/resource-table.c pioneers-0.12.4//client/gtk/resource-table.c
--- old_pioneers//client/gtk/resource-table.c	2010-10-26 11:24:09.000000000 -0400
+++ pioneers-0.12.4//client/gtk/resource-table.c	2011-07-06 11:46:04.194275000 -0400
@@ -131,6 +131,8 @@
 
 	gchar *temp;
 	GtkWidget *widget;
+	GdkPixmap *p;
+	GdkBitmap *b;
 	gint i;
 	gint row;
 
@@ -144,7 +146,7 @@
 	rt->bank_offset = with_bank ? 1 : 0;
 	gtk_table_resize(GTK_TABLE(rt),
 			 NO_RESOURCE + 1 + with_total ? 1 : 0,
-			 5 + rt->bank_offset);
+			 6 + rt->bank_offset);
 	gtk_table_set_row_spacings(GTK_TABLE(rt), 3);
 	gtk_table_set_col_spacings(GTK_TABLE(rt), 6);
 
@@ -154,24 +156,30 @@
 	g_free(temp);
 	gtk_widget_show(widget);
 	gtk_table_attach_defaults(GTK_TABLE(rt), widget,
-				  0, 5 + rt->bank_offset, 0, 1);
+				  0, 6 + rt->bank_offset, 0, 1);
 	gtk_misc_set_alignment(GTK_MISC(widget), 0, 0.5);
 
 	row = 1;
 	for (i = 0; i < NO_RESOURCE; i++) {
 		rt->row[i].filter = FALSE;
 
+		gui_get_resource_pixmap(i, &p, &b, NULL, NULL);
+		widget = gtk_image_new_from_pixmap(p, b);
+		gtk_widget_show(widget);
+		gtk_table_attach_defaults(GTK_TABLE(rt), widget,
+					  0, 1, row, row + 1);
+
 		widget = rt->row[i].label_widget =
 		    gtk_label_new(resource_name(i, TRUE));
 		gtk_widget_show(widget);
 		gtk_table_attach_defaults(GTK_TABLE(rt), widget,
-					  0, 1, row, row + 1);
+					  1, 2, row, row + 1);
 		gtk_misc_set_alignment(GTK_MISC(widget), 0.0, 0.5);
 
 		widget = rt->row[i].hand_widget = gtk_entry_new();
 		gtk_widget_show(widget);
 		gtk_table_attach_defaults(GTK_TABLE(rt), widget,
-					  1, 2, row, row + 1);
+					  2, 3, row, row + 1);
 		gtk_entry_set_width_chars(GTK_ENTRY(widget), 3);
 		gtk_widget_set_sensitive(widget, FALSE);
 		gtk_entry_set_alignment(GTK_ENTRY(widget), 1.0);
@@ -189,7 +197,7 @@
 				 &rt->row[i]);
 		gtk_widget_show(widget);
 		gtk_table_attach_defaults(GTK_TABLE(rt), widget,
-					  2, 3, row, row + 1);
+					  3, 4, row, row + 1);
 		gtk_widget_set_tooltip_text(widget,
 					    /* Tooltip for decreasing the selected amount */
 					    _(""
@@ -200,7 +208,7 @@
 			widget = rt->row[i].bank_widget = gtk_entry_new();
 			gtk_widget_show(widget);
 			gtk_table_attach_defaults(GTK_TABLE(rt), widget,
-						  3, 4, row, row + 1);
+						  4, 5, row, row + 1);
 			gtk_entry_set_width_chars(GTK_ENTRY(widget), 3);
 			gtk_widget_set_sensitive(widget, FALSE);
 			gtk_entry_set_alignment(GTK_ENTRY(widget), 1.0);
@@ -218,8 +226,8 @@
 				 &rt->row[i]);
 		gtk_widget_show(widget);
 		gtk_table_attach_defaults(GTK_TABLE(rt), widget,
-					  3 + rt->bank_offset,
-					  4 + rt->bank_offset, row,
+					  4 + rt->bank_offset,
+					  5 + rt->bank_offset, row,
 					  row + 1);
 		gtk_widget_set_tooltip_text(widget,
 					    /* Tooltip for increasing the selected amount */
@@ -230,8 +238,8 @@
 		    gtk_spin_button_new_with_range(0, 99, 1);
 		gtk_widget_show(widget);
 		gtk_table_attach_defaults(GTK_TABLE(rt), widget,
-					  4 + rt->bank_offset,
-					  5 + rt->bank_offset, row,
+					  5 + rt->bank_offset,
+					  6 + rt->bank_offset, row,
 					  row + 1);
 		gtk_entry_set_width_chars(GTK_ENTRY(widget), 3);
 		gtk_entry_set_alignment(GTK_ENTRY(widget), 1.0);
diff -urN old_pioneers//client/gtk/trade.c pioneers-0.12.4//client/gtk/trade.c
--- old_pioneers//client/gtk/trade.c	2011-07-06 11:17:39.244275000 -0400
+++ pioneers-0.12.4//client/gtk/trade.c	2011-07-06 11:37:42.674275004 -0400
@@ -256,9 +256,22 @@
 			  Resource resource)
 {
 	gint col;
+	GtkWidget *resource_pic;
+	GdkPixmap *p;
+	GdkBitmap *b;
 
 	col = 0;
 	row->resource = resource;
+
+	gui_get_resource_pixmap(resource, &p, &b, NULL, NULL);
+	resource_pic = gtk_image_new_from_pixmap(p, b);
+	gtk_widget_show(resource_pic);
+	gtk_table_attach(GTK_TABLE(table), resource_pic,
+			 col, col + 1, resource, resource + 1,
+			 GTK_FILL, GTK_FILL, 0, 0);
+	col++;
+
+
 	row->chk =
 	    gtk_check_button_new_with_label(resource_name(resource, TRUE));
 	g_signal_connect(G_OBJECT(row->chk), "toggled",
@@ -445,7 +458,7 @@
 	gtk_widget_show(alignment);
 	gtk_box_pack_start(GTK_BOX(vbox), alignment, FALSE, FALSE, 0);
 
-	table = gtk_table_new(NO_RESOURCE, 2, FALSE);
+	table = gtk_table_new(NO_RESOURCE, 3, FALSE);
 	gtk_widget_show(table);
 	gtk_container_add(GTK_CONTAINER(alignment), table);
 	gtk_container_set_border_width(GTK_CONTAINER(table), 0);
@@ -475,7 +488,7 @@
 	gtk_box_pack_start(GTK_BOX(we_receive_frame), alignment, FALSE,
 			   FALSE, 0);
 
-	table = gtk_table_new(NO_RESOURCE, 2, FALSE);
+	table = gtk_table_new(NO_RESOURCE, 3, FALSE);
 	gtk_widget_show(table);
 	gtk_container_add(GTK_CONTAINER(alignment), table);
 	gtk_container_set_border_width(GTK_CONTAINER(table), 0);
diff -urN old_pioneers//server/special_building_phase.c pioneers-0.12.4//server/special_building_phase.c
--- old_pioneers//server/special_building_phase.c	2011-07-06 11:17:46.374275002 -0400
+++ pioneers-0.12.4//server/special_building_phase.c	2011-07-06 11:10:42.114274999 -0400
@@ -48,6 +48,9 @@
 	GList *list;
 	// is everyone finished yet?
 	for(list = player_first_real(game); list != NULL; list = player_next_real(list)) {
+		if(((Player *) list->data)->disconnected) {
+			((Player *) list->data)->doing_special_building_phase = 0;
+		}
 		if(((Player *) list->data)->doing_special_building_phase) {
 			break;
 		}
